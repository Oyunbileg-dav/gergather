{"ast":null,"code":"var _jsxFileName = \"/Users/oyunbilegdavaanyam/Desktop/act2021-team3/src/components/post/PostDialog.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../../util/MyButton';\nimport dayjs from 'dayjs';\nimport { Link } from 'react-router-dom'; // MUI Stuff\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'; // Icons\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport UnfoldMore from '@material-ui/icons/UnfoldMore'; // Redux stuff\n\nimport { connect } from 'react-redux';\nimport { getPost, clearErrors } from '../../redux/actions/dataActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({ ...theme,\n  profileImage: {\n    maxWidth: 200,\n    height: 200,\n    borderRadius: '50%',\n    objectFit: 'cover'\n  },\n  dialogContent: {\n    padding: 20\n  },\n  closeButton: {\n    position: 'absolute',\n    left: '90%'\n  },\n  expandButton: {\n    position: 'absolute',\n    left: '90%'\n  },\n  spinnerDiv: {\n    textAlign: 'center',\n    marginTop: 50,\n    marginBottom: 50\n  }\n});\n\nclass PostDialog extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      oldPath: '',\n      newPath: ''\n    };\n\n    this.handleOpen = () => {\n      let oldPath = window.location.pathname;\n      const {\n        userHandle,\n        postId\n      } = this.props;\n      const newPath = `/users/${userHandle}/scream/${postId}`;\n      if (oldPath === newPath) oldPath = `/users/${userHandle}`;\n      window.history.pushState(null, null, newPath);\n      this.setState({\n        open: true,\n        oldPath,\n        newPath\n      });\n      this.props.getScream(this.props.postId);\n    };\n\n    this.handleClose = () => {\n      window.history.pushState(null, null, this.state.oldPath);\n      this.setState({\n        open: false\n      });\n      this.props.clearErrors();\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.openDialog) {\n      this.handleOpen();\n    }\n  }\n\n  render() {\n    const {\n      classes,\n      post: {\n        postId,\n        body,\n        createdAt,\n        userImage,\n        userHandle\n      },\n      UI: {\n        loading\n      }\n    } = this.props;\n    const dialogMarkup = loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.spinnerDiv,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 200,\n        thickness: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 16,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 5,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: userImage,\n          alt: \"Profile\",\n          className: classes.profileImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 7,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: Link,\n          color: \"primary\",\n          variant: \"h5\",\n          to: `/users/${userHandle}`,\n          children: [\"@\", userHandle]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: classes.invisibleSeparator\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          children: dayjs(createdAt).format('h:mm a, MMMM DD YYYY')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: classes.invisibleSeparator\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: classes.visibleSeparator\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MyButton, {\n        onClick: this.handleOpen,\n        tip: \"Expand post\",\n        tipClassName: classes.expandButton,\n        children: /*#__PURE__*/_jsxDEV(UnfoldMore, {\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: this.state.open,\n        onClose: this.handleClose,\n        fullWidth: true,\n        maxWidth: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(MyButton, {\n          tip: \"Close\",\n          onClick: this.handleClose,\n          tipClassName: classes.closeButton,\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          className: classes.dialogContent,\n          children: dialogMarkup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nPostDialog.propTypes = {\n  clearErrors: PropTypes.func.isRequired,\n  getPost: PropTypes.func.isRequired,\n  postId: PropTypes.string.isRequired,\n  userHandle: PropTypes.string.isRequired,\n  post: PropTypes.object.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  post: state.data.scream,\n  UI: state.UI\n});\n\nconst mapActionsToProps = {\n  getPost,\n  clearErrors\n};\nexport default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(PostDialog));","map":{"version":3,"sources":["/Users/oyunbilegdavaanyam/Desktop/act2021-team3/src/components/post/PostDialog.js"],"names":["React","Component","Fragment","PropTypes","withStyles","MyButton","dayjs","Link","Dialog","DialogContent","CircularProgress","Grid","Typography","CloseIcon","UnfoldMore","connect","getPost","clearErrors","styles","theme","profileImage","maxWidth","height","borderRadius","objectFit","dialogContent","padding","closeButton","position","left","expandButton","spinnerDiv","textAlign","marginTop","marginBottom","PostDialog","state","open","oldPath","newPath","handleOpen","window","location","pathname","userHandle","postId","props","history","pushState","setState","getScream","handleClose","componentDidMount","openDialog","render","classes","post","body","createdAt","userImage","UI","loading","dialogMarkup","invisibleSeparator","format","visibleSeparator","propTypes","func","isRequired","string","object","mapStateToProps","data","scream","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../../util/MyButton';\nimport dayjs from 'dayjs';\nimport { Link } from 'react-router-dom';\n// MUI Stuff\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n// Icons\nimport CloseIcon from '@material-ui/icons/Close';\nimport UnfoldMore from '@material-ui/icons/UnfoldMore';\n// Redux stuff\nimport { connect } from 'react-redux';\nimport { getPost, clearErrors } from '../../redux/actions/dataActions';\n\nconst styles = (theme) => ({\n  ...theme,\n  profileImage: {\n    maxWidth: 200,\n    height: 200,\n    borderRadius: '50%',\n    objectFit: 'cover'\n  },\n  dialogContent: {\n    padding: 20\n  },\n  closeButton: {\n    position: 'absolute',\n    left: '90%'\n  },\n  expandButton: {\n    position: 'absolute',\n    left: '90%'\n  },\n  spinnerDiv: {\n    textAlign: 'center',\n    marginTop: 50,\n    marginBottom: 50\n  }\n});\n\nclass PostDialog extends Component {\n  state = {\n    open: false,\n    oldPath: '',\n    newPath: ''\n  };\n  componentDidMount() {\n    if (this.props.openDialog) {\n      this.handleOpen();\n    }\n  }\n  handleOpen = () => {\n    let oldPath = window.location.pathname;\n\n    const { userHandle, postId } = this.props;\n    const newPath = `/users/${userHandle}/scream/${postId}`;\n\n    if (oldPath === newPath) oldPath = `/users/${userHandle}`;\n\n    window.history.pushState(null, null, newPath);\n\n    this.setState({ open: true, oldPath, newPath });\n    this.props.getScream(this.props.postId);\n  };\n  handleClose = () => {\n    window.history.pushState(null, null, this.state.oldPath);\n    this.setState({ open: false });\n    this.props.clearErrors();\n  };\n\n  render() {\n    const {\n      classes,\n      post: {\n        postId,\n        body,\n        createdAt,\n        userImage,\n        userHandle\n      },\n      UI: { loading }\n    } = this.props;\n\n    const dialogMarkup = loading ? (\n      <div className={classes.spinnerDiv}>\n        <CircularProgress size={200} thickness={2} />\n      </div>\n    ) : (\n      <Grid container spacing={16}>\n        <Grid item sm={5}>\n          <img src={userImage} alt=\"Profile\" className={classes.profileImage} />\n        </Grid>\n        <Grid item sm={7}>\n          <Typography\n            component={Link}\n            color=\"primary\"\n            variant=\"h5\"\n            to={`/users/${userHandle}`}\n          >\n            @{userHandle}\n          </Typography>\n          <hr className={classes.invisibleSeparator} />\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            {dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}\n          </Typography>\n          <hr className={classes.invisibleSeparator} />\n          <Typography variant=\"body1\">{body}</Typography>\n        </Grid>\n        <hr className={classes.visibleSeparator} />\n      </Grid>\n    );\n    return (\n      <Fragment>\n        <MyButton\n          onClick={this.handleOpen}\n          tip=\"Expand post\"\n          tipClassName={classes.expandButton}\n        >\n          <UnfoldMore color=\"primary\" />\n        </MyButton>\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          fullWidth\n          maxWidth=\"sm\"\n        >\n          <MyButton\n            tip=\"Close\"\n            onClick={this.handleClose}\n            tipClassName={classes.closeButton}\n          >\n            <CloseIcon />\n          </MyButton>\n          <DialogContent className={classes.dialogContent}>\n            {dialogMarkup}\n          </DialogContent>\n        </Dialog>\n      </Fragment>\n    );\n  }\n}\n\nPostDialog.propTypes = {\n  clearErrors: PropTypes.func.isRequired,\n  getPost: PropTypes.func.isRequired,\n  postId: PropTypes.string.isRequired,\n  userHandle: PropTypes.string.isRequired,\n  post: PropTypes.object.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  post: state.data.scream,\n  UI: state.UI\n});\n\nconst mapActionsToProps = {\n  getPost,\n  clearErrors\n};\n\nexport default connect(\n  mapStateToProps,\n  mapActionsToProps\n)(withStyles(styles)(PostDialog));\n"]},"metadata":{},"sourceType":"module"}