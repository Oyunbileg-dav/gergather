{"ast":null,"code":"var _jsxFileName = \"/Users/oyunbilegdavaanyam/Desktop/act2021-team3/src/pages/User.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Post from '../components/post/Post';\nimport StaticProfile from '../components/profile/StaticProfile';\nimport Grid from '@material-ui/core/Grid';\nimport PostSkeleton from '../util/PostSkeleton';\nimport ProfileSkeleton from '../util/ProfileSkeleton';\nimport { connect } from 'react-redux';\nimport { getUserData } from '../redux/actions/dataActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass user extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      profile: null,\n      postIdParam: null\n    };\n  }\n\n  componentDidMount() {\n    const handle = this.props.match.params.handle;\n    const postId = this.props.match.params.postId;\n    if (postId) this.setState({\n      postIdParam: postId\n    });\n    this.props.getUserData(userId);\n    axios.get(`/user/${userId}`).then(res => {\n      this.setState({\n        profile: res.data.user\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    const {\n      posts,\n      loading\n    } = this.props.data;\n    const {\n      postIdParam\n    } = this.state;\n    const postsMarkup = loading ? /*#__PURE__*/_jsxDEV(PostSkeleton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this) : posts === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No posts from this user\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this) : !postIdParam ? posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post\n    }, post.postId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 27\n    }, this)) : posts.map(post => {\n      if (post.postId !== postIdParam) return /*#__PURE__*/_jsxDEV(Post, {\n        post: post\n      }, post.postId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 18\n      }, this);else return /*#__PURE__*/_jsxDEV(Post, {\n        post: post,\n        openDialog: true\n      }, post.postId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 16,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 8,\n        xs: 12,\n        children: postsMarkup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 4,\n        xs: 12,\n        children: this.state.profile === null ? /*#__PURE__*/_jsxDEV(ProfileSkeleton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(StaticProfile, {\n          profile: this.state.profile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nuser.propTypes = {\n  getUserData: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps, {\n  getUserData\n})(user);","map":{"version":3,"sources":["/Users/oyunbilegdavaanyam/Desktop/act2021-team3/src/pages/User.js"],"names":["React","Component","PropTypes","axios","Post","StaticProfile","Grid","PostSkeleton","ProfileSkeleton","connect","getUserData","user","state","profile","postIdParam","componentDidMount","handle","props","match","params","postId","setState","userId","get","then","res","data","catch","err","console","log","render","posts","loading","postsMarkup","map","post","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Post from '../components/post/Post'\nimport StaticProfile from '../components/profile/StaticProfile';\nimport Grid from '@material-ui/core/Grid';\n\nimport PostSkeleton from '../util/PostSkeleton';\nimport ProfileSkeleton from '../util/ProfileSkeleton';\n\nimport { connect } from 'react-redux';\nimport { getUserData } from '../redux/actions/dataActions';\n\nclass user extends Component {\n  state = {\n    profile: null,\n    postIdParam: null\n  };\n  componentDidMount() {\n    const handle = this.props.match.params.handle;\n    const postId = this.props.match.params.postId;\n\n    if (postId) this.setState({ postIdParam: postId });\n\n    this.props.getUserData(userId);\n    axios\n      .get(`/user/${userId}`)\n      .then((res) => {\n        this.setState({\n          profile: res.data.user\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n  render() {\n    const { posts, loading } = this.props.data;\n    const { postIdParam } = this.state;\n\n    const postsMarkup = loading ? (\n      <PostSkeleton\n     />\n    ) : posts === null ? (\n      <p>No posts from this user</p>\n    ) : !postIdParam ? (\n      posts.map((post) => <Post key={post.postId} post={post} />)\n    ) : (\n      posts.map((post) => {\n        if (post.postId !== postIdParam)\n          return <Post key={post.postId} post={post} />;\n        else return <Post key={post.postId} post={post} openDialog />;\n      })\n    );\n\n    return (\n      <Grid container spacing={16}>\n        <Grid item sm={8} xs={12}>\n          {postsMarkup}\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          {this.state.profile === null ? (\n            <ProfileSkeleton />\n          ) : (\n            <StaticProfile profile={this.state.profile} />\n          )}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nuser.propTypes = {\n  getUserData: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  data: state.data\n});\n\nexport default connect(\n  mapStateToProps,\n  { getUserData }\n)(user);\n"]},"metadata":{},"sourceType":"module"}